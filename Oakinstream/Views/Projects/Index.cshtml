@model Oakinstream.ViewModels.SearchIndexViewModel
@using PagedList.Mvc;

@{
    ViewBag.Title = "Projects";
}

<div class="container" style="text-align:center">
    <div class="row">
        <div class="col-md-12">
            <h1 class="text-primary"><strong>My @ViewBag.Title</strong></h1>
            <hr />
        </div>
    </div>
    @if (Request.IsAuthenticated && User.IsInRole("Admin"))
    {
        <div class="btn-group btn-group-justified">
            <a href="@Url.Action("Create", "Projects")" class="btn btn-success" style="margin:25px;">Create</a>
        </div>
    }
    <hr />

    <div class="row">
        <div class="col-md-12">

            @using (Html.BeginRouteForm("ProjectIndex", FormMethod.Get, new { @class = "SearchBar" }))
            {
                @Html.TextBox("Search", null, new { @class = "SearchBar", @placeholder = "Search" })
            }
            @{
                string ProjectString = "";
                if (Model.Projects.TotalItemCount == 1) { ProjectString = "project"; } else { ProjectString = "projects"; }
            }
            @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing" : "You searched for " + Model.Search + ", found") @Model.Projects.TotalItemCount @ProjectString
            @using (Html.BeginRouteForm("ProjectIndex", FormMethod.Get))
            {
                <button type="button" class="btn btn-default FilterBtn" data-toggle="collapse" data-target="#filters">Filters</button>
                <hr />
                <div id="filters" class="collapse">
                    <div class="row" style="text-align:center">
                        <div class="btn-group-vertical">
                            @Html.DropDownListFor(vm => vm.Category, Model.CategoryFilterItems, "CategoryList", new { @class = "FilterLists" })
                            @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "SortBy", new { @class = "FilterLists" })
                            <input type="submit" value="Filter" class="btn btn-success" />
                            <input type="hidden" name="Search" id="Search" value="@Model.Search" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <hr />
</div>

<table>
    @foreach (var item in Model.Projects)
    {
        <tr>

            <td>
                @if (item.ProjectImage != null)
                {
                    <a href="@Url.Action("Details",new { id = item.ID })">
                        <img src="@Url.Content(Constants.ProjectThumbnailPath + item.ProjectImage.FileName)" alt="@item.ProjectImage.FileName" />
                    </a>
                }
                else
                {
                    <a href="@Url.Action("Details",new { id = item.ID })">
                        <img src="@Url.Content(Constants.ProjectThumbnailPath + "default.jpg")" alt="Default" />
                    </a>
                }
                <br />
                @Html.DisplayFor(modelItem => item.Name)
            </td>

            <td>

            </td>
            <td>
                @if (Request.IsAuthenticated && User.IsInRole("Admin"))
                {
                    @Html.Raw(" | ")
                    <span class="glyphicon glyphicon-edit"></span>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID })
                    @Html.Raw(" | ")
                    <span class="glyphicon glyphicon-remove-circle"></span>
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                }
            </td>
        </tr>
    }
</table>


<div>
    Page @(Model.Projects.PageCount < Model.Projects.PageNumber ? 0 : Model.Projects.PageNumber) of
    @Model.Projects.PageCount @Html.PagedListPager(Model.Projects, page =>
Url.Action("Index", new { category = Model.Category, search = Model.Search, sortBy = Model.SortBy, page}))
</div>
