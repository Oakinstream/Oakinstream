@model Oakinstream.ViewModels.SearchIndexViewModel
@using PagedList.Mvc;
@{
    ViewBag.Title = "Blog";
    string blogContainer = "blog-container";
    if (Model.Blogs.Count == 0){
        blogContainer = "blog-container-empty";
    }
}


<div class="container @blogContainer">
    <div class="row blog-header-holder">
        @if (Request.IsAuthenticated && User.IsInRole("Admin"))
        {
            <div class="col-md-12">
                <div class="btn">
                    <a class="btn btn-success site-btn-create" href="@Url.Action("Create", "Blog")"><span class="glyphicon glyphicon-plus"></span></a>
                    <a class="btn btn-info site-btn-search" data-toggle="collapse" data-target="#AdminSearch"><span class="glyphicon glyphicon-search"></span></a>
                </div>
                <br />
                @{
                    string BlogString = "";
                    if (Model.Blogs.TotalItemCount == 1) { BlogString = "blog"; } else { BlogString = "blogs"; }
                }
                @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing" : "You searched for " + Model.Search + ", found") @Model.Blogs.TotalItemCount @BlogString
            </div>
            <div id="AdminSearch" class="collapse">
                <br />
                <div class="col-md-12">
                    @using (Html.BeginRouteForm("BlogsIndex", FormMethod.Get, new { @class = "site-search" }))
                    {
                        @Html.TextBox("Search", null, new { @class = "site-search-bar", @placeholder = "Search" })
                    }
                    <br />
                    @using (Html.BeginRouteForm("BlogsIndex", FormMethod.Get))
                    {
                        <button type="button" class="btn btn-success site-btn-filter" data-toggle="collapse" data-target="#filters">Filters</button>
                        <br />
                        <div id="filters" class="collapse">
                            <br />
                            <div class="row" style="text-align:center">
                                <div class="btn-group-vertical">
                                    @Html.DropDownListFor(vm => vm.Category, Model.CategoryFilterItems, "CategoryList", new { @class = "site-filter-list" })
                                    @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "SortBy", new { @class = "site-filter-list" })
                                    <input type="submit" value="Filter" class="btn btn-success site-btn-filter" />
                                    <input type="hidden" name="Search" id="Search" value="@Model.Search" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <br />
        }
        <br />
        @foreach (var item in Model.Blogs)
        {
        <div class="col-md-12">
            <div class="jumbotron blog-jumbotron">
                <h1><span class="blog-title-text">@Html.DisplayFor(Model => item.Title)</span></h1>
                @if (Request.IsAuthenticated && User.IsInRole("Admin"))
                {
                    <h2 class="text-info text-uppercase">Category: <strong>@Html.DisplayFor(Model => item.BlogCategoryModels.Name)</strong></h2>
                    <div class="btn">
                        <a class="btn btn-info site-btn-edit" href="@Url.Action("Edit", "Blog", new { id = item.ID })"><span class="glyphicon glyphicon-edit"></span></a>
                    </div>
                    <div class="btn">
                        <a class="btn btn-danger site-btn-delete" href="@Url.Action("Delete", "Blog", new { id = item.ID })"><span class="glyphicon glyphicon-trash"></span></a>
                    </div>

                }

                @if (item.BlogImageMappings != null && item.BlogImageMappings.Any())
                {
                    <hr />
                    foreach (var image in item.BlogImageMappings)
                    {
                        if (image.ImageNumber == 0)
                        {
                            <a href="@(Url.Content(Constants.BlogImagePath + image.BlogImage.FileName))"><img class="blog-image" src="@(Url.Content(Constants.BlogImagePath + image.BlogImage.FileName))" alt="@item.Title" /></a>
                        }
                    }
                }

                @if (item.Description != null && item.Description.Any())
                {

                    <hr />
                    @Html.DisplayFor(Model => item.Description)
                    <hr />
                }

                @if (item.BlogImageMappings != null && item.BlogImageMappings.Any())
                {
                    <div class="blog-small-images-holder">
                        @foreach (var image in item.BlogImageMappings)
                        {
                            if ((image.ImageNumber > 0))
                            {
                                <a href="@(Url.Content(Constants.BlogImagePath + image.BlogImage.FileName))"><img class="form-group blog-small-images" src="@(Url.Content(Constants.BlogImagePath + image.BlogImage.FileName))" alt="@item.Title" /></a>
                                
                            }
                        }
                    </div>
                }

                @if (item.Link != null)
                {
                    <hr />
                    <span class="blog-link-text"><a href="@Html.DisplayFor(Model => item.Link)">Link</a></span>
                }

                <hr />
                <p>Posted by: @Html.DisplayFor(model => item.CreatedBy) - @Html.DisplayFor(model => item.CreatedDate)</p>
                @if (item.UpdatedBy != null && Request.IsAuthenticated && User.IsInRole("Admin"))
                {
                    <p>Updated by: @Html.DisplayFor(model => item.UpdatedBy) - @Html.DisplayFor(model => item.UpdatedDate)</p>
                }
            </div>
        </div>

        }
    </div>



    @if (Model.Blogs.PageCount > 10)
    {
        <div class="row" style="text-align:center;">
            Page @(Model.Blogs.PageCount < Model.Blogs.PageNumber ? 0 : Model.Blogs.PageNumber) of
            @Model.Blogs.PageCount @Html.PagedListPager(Model.Blogs, page =>
Url.Action("Index", new { category = Model.Category, search = Model.Search, sortBy = Model.SortBy, page}))
        </div>
    }
</div>